---
# Main tasks for initial_setup role

- name: Detect OS distribution
  ansible.builtin.set_fact:
    is_debian: "{{ ansible_distribution == 'Debian' }}"
    is_ubuntu: "{{ ansible_distribution == 'Ubuntu' }}"
  tags: ['always']

- name: Display detected OS
  ansible.builtin.debug:
    msg: "Detected OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
  tags: ['always']

- name: Fail if OS is not Debian or Ubuntu
  ansible.builtin.fail:
    msg: "This role only supports Debian and Ubuntu systems"
  when: not (is_debian or is_ubuntu)
  tags: ['always']

- name: Update apt cache
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
  tags: ['setup', 'packages']

- name: Upgrade all packages to the latest version
  ansible.builtin.apt:
    upgrade: dist
    autoremove: yes
    autoclean: yes
  tags: ['setup', 'upgrade']

- name: Install essential system packages
  ansible.builtin.apt:
    name: "{{ system_packages }}"
    state: present
  tags: ['setup', 'packages']

- name: Set system timezone
  community.general.timezone:
    name: "{{ timezone }}"
  notify: restart cron
  tags: ['setup', 'timezone']

- name: Check if systemd-timesyncd is available
  ansible.builtin.systemd:
    name: systemd-timesyncd
  register: timesyncd_status
  failed_when: false
  when: enable_ntp
  tags: ['setup', 'ntp']

- name: Ensure systemd-timesyncd is enabled and started (Ubuntu 24.04+)
  ansible.builtin.systemd:
    name: systemd-timesyncd
    enabled: yes
    state: started
  when: 
    - enable_ntp
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version|int >= 24
  tags: ['setup', 'ntp']

- name: Install chrony for older systems (Ubuntu < 24 or Debian)
  ansible.builtin.apt:
    name: chrony
    state: present
  when: 
    - enable_ntp
    - not (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 24)
  tags: ['setup', 'ntp']

- name: Enable and start chrony service
  ansible.builtin.systemd:
    name: chrony
    enabled: yes
    state: started
  when: 
    - enable_ntp
    - not (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int >= 24)
  tags: ['setup', 'ntp']

- name: Configure timezone for timesyncd
  ansible.builtin.lineinfile:
    path: /etc/systemd/timesyncd.conf
    regexp: '^#?NTP='
    line: 'NTP=0.ubuntu.pool.ntp.org 1.ubuntu.pool.ntp.org'
    state: present
  when: 
    - enable_ntp
    - ansible_distribution == 'Ubuntu'
    - ansible_distribution_major_version|int >= 24
  notify: restart timesyncd
  tags: ['setup', 'ntp']

- name: Configure UFW defaults
  community.general.ufw:
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  loop:
    - { direction: 'incoming', policy: 'deny' }
    - { direction: 'outgoing', policy: 'allow' }
  when: enable_ufw
  tags: ['setup', 'firewall']

- name: Allow SSH through UFW
  community.general.ufw:
    rule: allow
    port: "{{ allowed_ssh_port }}"
    proto: tcp
  when: enable_ufw
  tags: ['setup', 'firewall']

- name: Enable UFW
  community.general.ufw:
    state: enabled
  when: enable_ufw
  tags: ['setup', 'firewall']

- name: Configure unattended-upgrades
  ansible.builtin.lineinfile:
    path: /etc/apt/apt.conf.d/50unattended-upgrades
    regexp: '^//\s*"{{ item }}";'
    line: '        "{{ item }}";'
    state: present
  loop:
    - '${distro_id}:${distro_codename}-security'
    - '${distro_id}:${distro_codename}-updates'
  tags: ['setup', 'security']

- name: Enable automatic updates
  ansible.builtin.copy:
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    content: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Unattended-Upgrade "1";
      APT::Periodic::AutocleanInterval "7";
    mode: '0644'
  tags: ['setup', 'security']

- name: Set hostname from inventory
  ansible.builtin.hostname:
    name: "{{ inventory_hostname }}"
  when: inventory_hostname != 'localhost'
  tags: ['setup', 'hostname']

- name: Gather updated facts after setup
  ansible.builtin.setup:
  tags: ['always']
